// RegisterApplicationCommands.hpp - Registers the slash commands of this bot.
// may 27, 2021
// chris m.
// https://github.com/RealTimeChris

#pragma once

#include "HelperFunctions.hpp"

namespace discord_core_api {

	class register_application_commands {
	  public:
		register_application_commands() {
			createRouletteCommandData.dmPermission			   = false;
			createRouletteCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createRouletteCommandData.description			   = "start or bet on a game of roulette.";
			createRouletteCommandData.name					   = "roulette";
			application_command_option_data rouletteOptionOne;
			rouletteOptionOne.name		  = "start";
			rouletteOptionOne.type		  = application_command_option_type::Sub_Command;
			rouletteOptionOne.description = "begins the roulette round.";
			createRouletteCommandData.options.emplace_back(rouletteOptionOne);
			application_command_option_data rouletteOptionTwo;
			rouletteOptionTwo.name		  = "bet1";
			rouletteOptionTwo.type		  = application_command_option_type::Sub_Command;
			rouletteOptionTwo.description = "bet on an active game of roulette.";
			application_command_option_data rouletteOptionTwoOh;
			rouletteOptionTwoOh.name		= "amount";
			rouletteOptionTwoOh.description = "enter the amount which you would like to bet";
			rouletteOptionTwoOh.required	= true;
			rouletteOptionTwoOh.type		= application_command_option_type::Integer;
			rouletteOptionTwoOh.minValue	= 1;
			rouletteOptionTwoOh.maxValue	= 100000000;
			rouletteOptionTwo.options.emplace_back(rouletteOptionTwoOh);
			application_command_option_data rouletteOptionTwoOne;
			rouletteOptionTwoOne.name		 = "type";
			rouletteOptionTwoOne.type		 = application_command_option_type::String;
			rouletteOptionTwoOne.required	 = true;
			rouletteOptionTwoOne.description = "choose the type of bet you would like to make.";
			application_command_option_choice_data choice01;
			choice01.name  = "0";
			choice01.value = "0";
			rouletteOptionTwoOne.choices.emplace_back(choice01);
			application_command_option_choice_data choice02;
			choice02.name  = "00";
			choice02.value = "00";
			rouletteOptionTwoOne.choices.emplace_back(choice02);
			application_command_option_choice_data choice03;
			choice03.name  = "straight";
			choice03.value = "straight";
			rouletteOptionTwoOne.choices.emplace_back(choice03);
			application_command_option_choice_data choice04;
			choice04.name  = "row";
			choice04.value = "row";
			rouletteOptionTwoOne.choices.emplace_back(choice04);
			application_command_option_choice_data choice05;
			choice05.name  = "split";
			choice05.value = "split";
			rouletteOptionTwoOne.choices.emplace_back(choice05);
			application_command_option_choice_data choice06;
			choice06.name  = "street";
			choice06.value = "street";
			rouletteOptionTwoOne.choices.emplace_back(choice06);
			application_command_option_choice_data choice07;
			choice07.name  = "basket";
			choice07.value = "basket";
			rouletteOptionTwoOne.choices.emplace_back(choice07);
			application_command_option_choice_data choice08;
			choice08.name  = "sixline";
			choice08.value = "sixline";
			rouletteOptionTwoOne.choices.emplace_back(choice08);
			application_command_option_choice_data choice09;
			choice09.name  = "1stcolumn";
			choice09.value = "1stcolumn";
			rouletteOptionTwoOne.choices.emplace_back(choice09);
			application_command_option_choice_data choice10;
			choice10.name  = "2ndcolumn";
			choice10.value = "2ndcolumn";
			rouletteOptionTwoOne.choices.emplace_back(choice10);
			rouletteOptionTwo.options.emplace_back(rouletteOptionTwoOne);
			application_command_option_data rouletteOptionTwoTwo;
			rouletteOptionTwoTwo.name		 = "betoptions";
			rouletteOptionTwoTwo.description = "bet options for select bet-types.";
			rouletteOptionTwoOne.required	 = false;
			rouletteOptionTwoTwo.type		 = application_command_option_type::Integer;
			rouletteOptionTwoTwo.minValue	 = 1;
			rouletteOptionTwoTwo.maxValue	 = 100;
			rouletteOptionTwo.options.emplace_back(rouletteOptionTwoTwo);
			createRouletteCommandData.options.emplace_back(rouletteOptionTwo);
			application_command_option_data rouletteOptionThree;
			rouletteOptionThree.name		= "bet2";
			rouletteOptionThree.type		= application_command_option_type::Sub_Command;
			rouletteOptionThree.description = "bet on an active game of roulette.";
			application_command_option_data rouletteOptionThreeOh;
			rouletteOptionThreeOh.name		  = "amount";
			rouletteOptionThreeOh.description = "enter the amount which you would like to bet";
			rouletteOptionThreeOh.required	  = true;
			rouletteOptionThreeOh.type		  = application_command_option_type::Integer;
			rouletteOptionThreeOh.minValue	  = 1;
			rouletteOptionThreeOh.maxValue	  = 1000000000;
			rouletteOptionThree.options.emplace_back(rouletteOptionThreeOh);
			application_command_option_data rouletteOptionThreeOne;
			rouletteOptionThreeOne.name		   = "type";
			rouletteOptionThreeOne.type		   = application_command_option_type::String;
			rouletteOptionThreeOne.required	   = true;
			rouletteOptionThreeOne.description = "choose the type of bet you would like to make.";
			application_command_option_choice_data choice11;
			choice11.name  = "3rdcolumn";
			choice11.value = "3rdcolumn";
			rouletteOptionThreeOne.choices.emplace_back(choice11);
			application_command_option_choice_data choice12;
			choice12.name  = "1stdozen";
			choice12.value = "1stdozen";
			rouletteOptionThreeOne.choices.emplace_back(choice12);
			application_command_option_choice_data choice13;
			choice13.name  = "2nddozen";
			choice13.value = "2nddozen";
			rouletteOptionThreeOne.choices.emplace_back(choice13);
			application_command_option_choice_data choice14;
			choice14.name  = "3rddozen";
			choice14.value = "3rddozen";
			rouletteOptionThreeOne.choices.emplace_back(choice14);
			application_command_option_choice_data choice15;
			choice15.name  = "odd";
			choice15.value = "odd";
			rouletteOptionThreeOne.choices.emplace_back(choice15);
			application_command_option_choice_data choice16;
			choice16.name  = "even";
			choice16.value = "even";
			rouletteOptionThreeOne.choices.emplace_back(choice16);
			application_command_option_choice_data choice17;
			choice17.name  = "red";
			choice17.value = "red";
			rouletteOptionThreeOne.choices.emplace_back(choice17);
			application_command_option_choice_data choice18;
			choice18.name  = "black";
			choice18.value = "black";
			rouletteOptionThreeOne.choices.emplace_back(choice18);
			application_command_option_choice_data choice19;
			choice19.name  = "1to18";
			choice19.value = "1to18";
			rouletteOptionThreeOne.choices.emplace_back(choice19);
			application_command_option_choice_data choice20;
			choice20.name  = "19to36";
			choice20.value = "19to36";
			rouletteOptionThreeOne.choices.emplace_back(choice20);
			rouletteOptionThree.options.emplace_back(rouletteOptionThreeOne);
			application_command_option_data rouletteOptionThreeTwo;
			rouletteOptionThreeTwo.name		   = "betoptions";
			rouletteOptionThreeTwo.description = "bet options for select bet-types.";
			rouletteOptionThreeTwo.required	   = false;
			rouletteOptionThreeTwo.type		   = application_command_option_type::Integer;
			rouletteOptionThreeTwo.minValue	   = 1;
			rouletteOptionThreeTwo.maxValue	   = 100;
			rouletteOptionThree.options.emplace_back(rouletteOptionThreeTwo);
			createRouletteCommandData.options.emplace_back(rouletteOptionThree);
			createRouletteCommandData.type = application_command_type::Chat_Input;

			registerApplicationCommandsCommandData.dmPermission				= false;
			registerApplicationCommandsCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			registerApplicationCommandsCommandData.description				= "register the programmatically designated slash commands.";
			registerApplicationCommandsCommandData.name						= "registerapplicationcommands";
			registerApplicationCommandsCommandData.type						= application_command_type::Chat_Input;

			createSellDrugsCommandData.dmPermission				= false;
			createSellDrugsCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createSellDrugsCommandData.description				= "sell drugs in exchange for some currency!";
			createSellDrugsCommandData.name						= "selldrugs";
			createSellDrugsCommandData.type						= application_command_type::Chat_Input;

			createBalanceCommandData.dmPermission			  = false;
			createBalanceCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createBalanceCommandData.description			  = "check your or another person's currency balances.";
			createBalanceCommandData.name					  = "balance";
			application_command_option_data applicationCommandOptionOne;
			applicationCommandOptionOne.name		= "person";
			applicationCommandOptionOne.required	= false;
			applicationCommandOptionOne.type		= application_command_option_type::User_Data;
			applicationCommandOptionOne.description = "the person who's balances you would like to check.";
			createBalanceCommandData.options.emplace_back(applicationCommandOptionOne);
			createBalanceCommandData.type = application_command_type::Chat_Input;

			createStreamAudioData.dmPermission			   = false;
			createStreamAudioData.defaultMemberPermissions = permission::Use_Application_Commands;
			createStreamAudioData.type					   = application_command_type::Chat_Input;
			createStreamAudioData.name					   = "streamaudio";
			createStreamAudioData.description			   = "connects to a voice channel to stream audio.";
			application_command_option_data streamAudioOptionOne{};
			streamAudioOptionOne.type		 = application_command_option_type::String;
			streamAudioOptionOne.description = "which ip to connect to.";
			streamAudioOptionOne.name		 = "connectionip";
			streamAudioOptionOne.required	 = true;
			createStreamAudioData.options.emplace_back(streamAudioOptionOne);
			application_command_option_data streamAudioOptionTwo{};
			streamAudioOptionTwo.type		 = application_command_option_type::Boolean;
			streamAudioOptionTwo.description = "whether or not to enable retransmission of other bot's audio.";
			streamAudioOptionTwo.name		 = "botaudio";
			streamAudioOptionTwo.required	 = true;
			createStreamAudioData.options.emplace_back(streamAudioOptionTwo);

			createDisconnectData.dmPermission			  = false;
			createDisconnectData.defaultMemberPermissions = permission::Use_Application_Commands;
			createDisconnectData.type					  = application_command_type::Chat_Input;
			createDisconnectData.name					  = "disconnect";
			createDisconnectData.description			  = "disconnect from the current voice channel.";

			createAddShopItemCommandData.dmPermission			  = false;
			createAddShopItemCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createAddShopItemCommandData.description			  = "add an item to the shop's inventory.";
			createAddShopItemCommandData.name					  = "addshopitem";
			application_command_option_data addShopItemCommandOptionOne;
			addShopItemCommandOptionOne.name		= "itemname";
			addShopItemCommandOptionOne.required	= true;
			addShopItemCommandOptionOne.type		= application_command_option_type::String;
			addShopItemCommandOptionOne.description = "the name of the item.";

			application_command_option_data addShopItemCommandOptionTwo;
			addShopItemCommandOptionTwo.name		= "selfmod";
			addShopItemCommandOptionTwo.required	= true;
			addShopItemCommandOptionTwo.type		= application_command_option_type::Integer;
			addShopItemCommandOptionTwo.description = "the self-mod value of the item.";
			addShopItemCommandOptionTwo.minValue	= 0;
			addShopItemCommandOptionTwo.maxValue	= 1000;
			createAddShopItemCommandData.options.emplace_back(addShopItemCommandOptionOne);
			createAddShopItemCommandData.options.emplace_back(addShopItemCommandOptionTwo);
			application_command_option_data addShopItemCommandOptionThree;
			addShopItemCommandOptionThree.name		  = "oppmod";
			addShopItemCommandOptionThree.required	  = true;
			addShopItemCommandOptionThree.minValue	  = static_cast<int64_t>(-1000);
			addShopItemCommandOptionThree.maxValue	  = 0;
			addShopItemCommandOptionThree.type		  = application_command_option_type::Integer;
			addShopItemCommandOptionThree.description = "the opp-mod value of the item.";
			createAddShopItemCommandData.options.emplace_back(addShopItemCommandOptionThree);
			application_command_option_data addShopItemCommandOptionFour;
			addShopItemCommandOptionFour.name		 = "itemcost";
			addShopItemCommandOptionFour.required	 = true;
			addShopItemCommandOptionFour.type		 = application_command_option_type::Integer;
			addShopItemCommandOptionFour.minValue	 = 0;
			addShopItemCommandOptionFour.maxValue	 = 1000000000;
			addShopItemCommandOptionFour.description = "the value/cost of the item.";
			createAddShopItemCommandData.options.emplace_back(addShopItemCommandOptionFour);
			application_command_option_data addShopItemCommandOptionFive;
			addShopItemCommandOptionFive.name		 = "emoji";
			addShopItemCommandOptionFive.required	 = true;
			addShopItemCommandOptionFive.type		 = application_command_option_type::String;
			addShopItemCommandOptionFive.description = "the emoji/icon to use for the item.";
			createAddShopItemCommandData.options.emplace_back(addShopItemCommandOptionFive);
			createAddShopItemCommandData.type = application_command_type::Chat_Input;

			createAddShopRoleCommandData.dmPermission			  = false;
			createAddShopRoleCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createAddShopRoleCommandData.description			  = "add a role to the shop's inventory.";
			createAddShopRoleCommandData.name					  = "addshoprole";
			application_command_option_data addShopRoleCommandOptionOne;
			addShopRoleCommandOptionOne.name		= "rolename";
			addShopRoleCommandOptionOne.required	= true;
			addShopRoleCommandOptionOne.type		= application_command_option_type::String;
			addShopRoleCommandOptionOne.description = "the name of the role.";
			createAddShopRoleCommandData.options.emplace_back(addShopRoleCommandOptionOne);
			application_command_option_data addShopRoleCommandOptionTwo;
			addShopRoleCommandOptionTwo.name		= "hexcolorvalue";
			addShopRoleCommandOptionTwo.required	= true;
			addShopRoleCommandOptionTwo.type		= application_command_option_type::String;
			addShopRoleCommandOptionTwo.description = "the hex-color value of the role.";
			createAddShopRoleCommandData.options.emplace_back(addShopRoleCommandOptionTwo);
			application_command_option_data addShopRoleCommandOptionThree;
			addShopRoleCommandOptionThree.name		  = "rolecost";
			addShopRoleCommandOptionThree.required	  = true;
			addShopRoleCommandOptionThree.minValue	  = 0;
			addShopRoleCommandOptionThree.maxValue	  = 10000000;
			addShopRoleCommandOptionThree.type		  = application_command_option_type::Integer;
			addShopRoleCommandOptionThree.description = "the value/cost of the role.";
			createAddShopRoleCommandData.options.emplace_back(addShopRoleCommandOptionThree);
			createAddShopRoleCommandData.type = application_command_type::Chat_Input;

			createCoinflipRoleCommandData.dmPermission			   = false;
			createCoinflipRoleCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createCoinflipRoleCommandData.description			   = "play heads or tails.";
			createCoinflipRoleCommandData.name					   = "coinflip";
			application_command_option_data coinflipCommandOptionOne;
			coinflipCommandOptionOne.name		 = "betamount";
			coinflipCommandOptionOne.required	 = true;
			coinflipCommandOptionOne.type		 = application_command_option_type::Integer;
			coinflipCommandOptionOne.minValue	 = 1;
			coinflipCommandOptionOne.maxValue	 = 100000000;
			coinflipCommandOptionOne.description = "the wager you would like to place.";
			createCoinflipRoleCommandData.options.emplace_back(coinflipCommandOptionOne);
			createCoinflipRoleCommandData.type = application_command_type::Chat_Input;

			createBlackjackCommandData.dmPermission				= false;
			createBlackjackCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createBlackjackCommandData.description				= "play a round of blackjack.";
			createBlackjackCommandData.name						= "blackjack";
			application_command_option_data blackJackCommandOptionOne;
			blackJackCommandOptionOne.name		  = "betamount";
			blackJackCommandOptionOne.minValue	  = 1;
			blackJackCommandOptionOne.maxValue	  = 100000000;
			blackJackCommandOptionOne.required	  = true;
			blackJackCommandOptionOne.type		  = application_command_option_type::Integer;
			blackJackCommandOptionOne.description = "the amount which you would like to wager.";
			createBlackjackCommandData.options.emplace_back(blackJackCommandOptionOne);
			createBlackjackCommandData.type = application_command_type::Chat_Input;

			createButtonsCommandData.dmPermission			  = false;
			createButtonsCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createButtonsCommandData.description			  = "test the buttons.";
			createButtonsCommandData.name					  = "buttons";
			createButtonsCommandData.type					  = application_command_type::Chat_Input;

			createShopCommandData.dmPermission			   = false;
			createShopCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createShopCommandData.description			   = "check out the server's shop!";
			createShopCommandData.name					   = "shop";
			createShopCommandData.type					   = application_command_type::Chat_Input;

			createBotInfoCommandData.dmPermission			  = true;
			createBotInfoCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createBotInfoCommandData.description			  = "displays info about the current bot.";
			createBotInfoCommandData.name					  = "botinfo";
			createBotInfoCommandData.type					  = application_command_type::Chat_Input;

			createCasinoStatsCommandData.dmPermission			  = false;
			createCasinoStatsCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createCasinoStatsCommandData.description			  = "view the server's casino stats.";
			createCasinoStatsCommandData.name					  = "casinostats";
			createCasinoStatsCommandData.type					  = application_command_type::Chat_Input;

			createDisplayGuildsDataCommandData.dmPermission				= true;
			createDisplayGuildsDataCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createDisplayGuildsDataCommandData.description				= "view the list of servers that this bot is in.";
			createDisplayGuildsDataCommandData.name						= "displayguildsdata";
			createDisplayGuildsDataCommandData.type						= application_command_type::Chat_Input;

			createDuelCommandData.dmPermission			   = false;
			createDuelCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createDuelCommandData.description			   = "challenge another server member do a duel.";
			createDuelCommandData.name					   = "duel";
			application_command_option_data duelCommandOptionOne;
			duelCommandOptionOne.name		 = "challengetarget";
			duelCommandOptionOne.required	 = true;
			duelCommandOptionOne.type		 = application_command_option_type::User_Data;
			duelCommandOptionOne.description = "the individual you are challenging to a duel.";
			createDuelCommandData.options.emplace_back(duelCommandOptionOne);
			application_command_option_data duelCommandOptionTwo;
			duelCommandOptionTwo.name		 = "betamount";
			duelCommandOptionTwo.required	 = true;
			duelCommandOptionTwo.type		 = application_command_option_type::Integer;
			duelCommandOptionTwo.minValue	 = 1;
			duelCommandOptionTwo.maxValue	 = 1000000000;
			duelCommandOptionTwo.description = "the amount of the wager you are putting up.";
			createDuelCommandData.options.emplace_back(duelCommandOptionTwo);
			createDuelCommandData.type = application_command_type::Chat_Input;

			createGamehouseOptionsCommandData.dmPermission			   = false;
			createGamehouseOptionsCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createGamehouseOptionsCommandData.description			   = "view the options of this bot.";
			createGamehouseOptionsCommandData.name					   = "gamehouseoptions";
			createGamehouseOptionsCommandData.type					   = application_command_type::Chat_Input;

			createInventoryCommandData.dmPermission				= false;
			createInventoryCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createInventoryCommandData.description				= "observe your inventory of items and roles.";
			createInventoryCommandData.name						= "inventory";
			application_command_option_data inventoryCommandOptionOne;
			inventoryCommandOptionOne.name		  = "user";
			inventoryCommandOptionOne.required	  = false;
			inventoryCommandOptionOne.type		  = application_command_option_type::User_Data;
			inventoryCommandOptionOne.description = "the user who's inventory you would like to view.";
			createInventoryCommandData.options.emplace_back(inventoryCommandOptionOne);
			createInventoryCommandData.type = application_command_type::Chat_Input;

			createLeaderboardCommandData.dmPermission			  = false;
			createLeaderboardCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createLeaderboardCommandData.description			  = "view the server's currency leaderboard.";
			createLeaderboardCommandData.name					  = "leaderboard";
			createLeaderboardCommandData.type					  = application_command_type::Chat_Input;

			createRemoveObjectCommandData.dmPermission			   = false;
			createRemoveObjectCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createRemoveObjectCommandData.description			   = "remove an object or role from a user's inventory.";
			createRemoveObjectCommandData.name					   = "removeobject";
			application_command_option_data testCommandOptionOne;
			testCommandOptionOne.name		 = "objectname";
			testCommandOptionOne.required	 = false;
			testCommandOptionOne.type		 = application_command_option_type::String;
			testCommandOptionOne.description = "the object to be removed.";
			createRemoveObjectCommandData.options.emplace_back(testCommandOptionOne);
			application_command_option_data testCommandOptionTwo;
			testCommandOptionTwo.name		 = "role";
			testCommandOptionTwo.required	 = false;
			testCommandOptionTwo.type		 = application_command_option_type::Role_Data;
			testCommandOptionTwo.description = "the role to be removed.";
			createRemoveObjectCommandData.options.emplace_back(testCommandOptionTwo);
			application_command_option_data testCommandOptionThree;
			testCommandOptionThree.name		   = "user";
			testCommandOptionThree.required	   = false;
			testCommandOptionThree.type		   = application_command_option_type::User_Data;
			testCommandOptionThree.description = "the user to remove the object/role from.";
			createRemoveObjectCommandData.options.emplace_back(testCommandOptionThree);
			createRemoveObjectCommandData.type = application_command_type::Chat_Input;

			createRemoveShopItemCommandData.dmPermission			 = false;
			createRemoveShopItemCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createRemoveShopItemCommandData.description				 = "remove an item from the server's shop.";
			createRemoveShopItemCommandData.name					 = "removeshopitem";
			application_command_option_data removeShopItemOptionOne;
			removeShopItemOptionOne.name		= "item";
			removeShopItemOptionOne.required	= true;
			removeShopItemOptionOne.type		= application_command_option_type::String;
			removeShopItemOptionOne.description = "the item which you would like to remove.";
			createRemoveShopItemCommandData.options.emplace_back(removeShopItemOptionOne);
			createRemoveShopItemCommandData.type = application_command_type::Chat_Input;

			createRemoveShopRoleCommandData.dmPermission			 = false;
			createRemoveShopRoleCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createRemoveShopRoleCommandData.description				 = "remove a role from the server's shop.";
			createRemoveShopRoleCommandData.name					 = "removeshoprole";
			application_command_option_data removeShopRoleOptionOne;
			removeShopRoleOptionOne.name		= "role";
			removeShopRoleOptionOne.required	= true;
			removeShopRoleOptionOne.type		= application_command_option_type::Role_Data;
			removeShopRoleOptionOne.description = "the role which you would like to remove.";
			createRemoveShopRoleCommandData.options.emplace_back(removeShopRoleOptionOne);
			createRemoveShopRoleCommandData.type = application_command_type::Chat_Input;

			createRobCommandData.dmPermission			  = false;
			createRobCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createRobCommandData.description			  = "rob a user for currency.";
			createRobCommandData.name					  = "rob";
			application_command_option_data robOptionOne;
			robOptionOne.name		 = "user";
			robOptionOne.required	 = true;
			robOptionOne.type		 = application_command_option_type::User_Data;
			robOptionOne.description = "the user which you would like to rob.";
			createRobCommandData.options.emplace_back(robOptionOne);
			createRobCommandData.type = application_command_type::Chat_Input;

			createSetGameChannelCommandData.dmPermission			 = false;
			createSetGameChannelCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createSetGameChannelCommandData.description				 = "sets the channels which you can play games in.";
			createSetGameChannelCommandData.name					 = "setgamechannel";
			application_command_option_data createSetGameChannelOptionOne;
			createSetGameChannelOptionOne.type		  = application_command_option_type::Sub_Command;
			createSetGameChannelOptionOne.name		  = "view";
			createSetGameChannelOptionOne.description = "view the currently enabled channels.";
			createSetGameChannelCommandData.options.emplace_back(createSetGameChannelOptionOne);
			application_command_option_data createSetGameChannelOptionTwo;
			createSetGameChannelOptionTwo.type		  = application_command_option_type::Sub_Command;
			createSetGameChannelOptionTwo.name		  = "add";
			createSetGameChannelOptionTwo.description = "add a channel to the list of enabled channels.";
			createSetGameChannelCommandData.options.emplace_back(createSetGameChannelOptionTwo);
			application_command_option_data createSetGameChannelOptionThree;
			createSetGameChannelOptionThree.type		= application_command_option_type::Sub_Command;
			createSetGameChannelOptionThree.name		= "remove";
			createSetGameChannelOptionThree.description = "remove a channel to the list of enabled channels.";
			createSetGameChannelCommandData.options.emplace_back(createSetGameChannelOptionThree);
			application_command_option_data createSetGameChannelOptionFour;
			createSetGameChannelOptionFour.type		   = application_command_option_type::Sub_Command;
			createSetGameChannelOptionFour.name		   = "purge";
			createSetGameChannelOptionFour.description = "purges the list of channels for the server.";
			createSetGameChannelCommandData.options.emplace_back(createSetGameChannelOptionFour);
			createSetGameChannelCommandData.type = application_command_type::Chat_Input;

			createSetBalanceCommandData.dmPermission			 = false;
			createSetBalanceCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createSetBalanceCommandData.description				 = "set the currency balance of yourself or another server member.";
			createSetBalanceCommandData.name					 = "setbalance";
			application_command_option_data createSetBalanceOptionOne;
			createSetBalanceOptionOne.type		  = application_command_option_type::Integer;
			createSetBalanceOptionOne.name		  = "amount";
			createSetBalanceOptionOne.required	  = true;
			createSetBalanceOptionOne.minValue	  = 0;
			createSetBalanceOptionOne.maxValue	  = 100000000;
			createSetBalanceOptionOne.description = "the amount to set the balance to.";
			createSetBalanceCommandData.options.emplace_back(createSetBalanceOptionOne);
			application_command_option_data createBalanceOptionOne;
			createBalanceOptionOne.type		   = application_command_option_type::String;
			createBalanceOptionOne.name		   = "balancetype";
			createBalanceOptionOne.description = "which of the two balances to set.";
			createBalanceOptionOne.required	   = true;
			application_command_option_choice_data setBalancechoiceOne;
			setBalancechoiceOne.name  = "wallet";
			setBalancechoiceOne.value = "wallet";
			application_command_option_choice_data setBalancechoiceTwo;
			setBalancechoiceTwo.name  = "bank";
			setBalancechoiceTwo.value = "bank";
			createBalanceOptionOne.choices.emplace_back(setBalancechoiceOne);
			createBalanceOptionOne.choices.emplace_back(setBalancechoiceTwo);
			createSetBalanceCommandData.options.emplace_back(createBalanceOptionOne);
			application_command_option_data createSetBalanceOptionThree;
			createSetBalanceOptionThree.name		= "targetuser";
			createSetBalanceOptionThree.description = "the user who's balance you would like to set.";
			createSetBalanceOptionThree.required	= false;
			createSetBalanceOptionThree.type		= application_command_option_type::User_Data;
			createSetBalanceCommandData.options.emplace_back(createSetBalanceOptionThree);
			createSetBalanceCommandData.type = application_command_type::Chat_Input;

			createSetBorderColorCommandData.dmPermission			 = false;
			createSetBorderColorCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createSetBorderColorCommandData.description				 = "set the default color of borders.";
			createSetBorderColorCommandData.name					 = "setbordercolor";
			application_command_option_data createSetBorderColoreOptionOne;
			createSetBorderColoreOptionOne.type		   = application_command_option_type::String;
			createSetBorderColoreOptionOne.name		   = "botname";
			createSetBorderColoreOptionOne.description = "which of the bots to change the setting on.";
			createSetBorderColoreOptionOne.required	   = true;
			application_command_option_choice_data setBorderColorchoiceOne;
			setBorderColorchoiceOne.name  = "gamehouse";
			setBorderColorchoiceOne.value = "gamehouse";
			createSetBorderColoreOptionOne.choices.emplace_back(setBorderColorchoiceOne);
			createSetBorderColorCommandData.options.emplace_back(createSetBorderColoreOptionOne);
			application_command_option_data createSetBorderColorOptionTwo;
			createSetBorderColorOptionTwo.type		  = application_command_option_type::String;
			createSetBorderColorOptionTwo.name		  = "hexcolorvalue";
			createSetBorderColorOptionTwo.required	  = true;
			createSetBorderColorOptionTwo.description = "the hex-color-value to set the borders to.";
			createSetBorderColorCommandData.options.emplace_back(createSetBorderColorOptionTwo);
			createSetBorderColorCommandData.type = application_command_type::Chat_Input;

			createSlotsCommandData.dmPermission				= false;
			createSlotsCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createSlotsCommandData.description				= "play a game of slots.";
			createSlotsCommandData.name						= "slots";
			application_command_option_data createSlotsOptionOne;
			createSlotsOptionOne.type		 = application_command_option_type::Integer;
			createSlotsOptionOne.minValue	 = 1;
			createSlotsOptionOne.maxValue	 = 100000000;
			createSlotsOptionOne.name		 = "betamount";
			createSlotsOptionOne.description = "the amount of currency which you will wager.";
			createSlotsOptionOne.required	 = true;
			createSlotsCommandData.options.emplace_back(createSlotsOptionOne);
			createSlotsCommandData.type = application_command_type::Chat_Input;

			createTransferCommandData.dmPermission			   = false;
			createTransferCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createTransferCommandData.description			   = "transfer currency from yourself to another server member.";
			createTransferCommandData.name					   = "transfer";
			application_command_option_data createTransferOptionOne;
			createTransferOptionOne.type		= application_command_option_type::Integer;
			createTransferOptionOne.minValue	= 1;
			createTransferOptionOne.maxValue	= 1000000000;
			createTransferOptionOne.name		= "amount";
			createTransferOptionOne.description = "the amount of currency which you would like to transfer.";
			createTransferOptionOne.required	= true;
			createTransferCommandData.options.emplace_back(createTransferOptionOne);
			application_command_option_data createTransferOptionTwo;
			createTransferOptionTwo.type		= application_command_option_type::User_Data;
			createTransferOptionTwo.name		= "user";
			createTransferOptionTwo.description = "the target user for the transfer.";
			createTransferOptionTwo.required	= true;
			createTransferCommandData.options.emplace_back(createTransferOptionTwo);
			createTransferCommandData.type = application_command_type::Chat_Input;

			createWithdrawCommandData.dmPermission			   = false;
			createWithdrawCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createWithdrawCommandData.description			   = "withdraw currency from your bank account to your wallet.";
			createWithdrawCommandData.name					   = "withdraw";
			application_command_option_data createWithdrawOptionOne;
			createWithdrawOptionOne.type		= application_command_option_type::Integer;
			createWithdrawOptionOne.minValue	= 1;
			createWithdrawOptionOne.maxValue	= static_cast<int32_t>(10000000000);
			createWithdrawOptionOne.name		= "amount";
			createWithdrawOptionOne.description = "the amount of currency which you would like to withdraw.";
			createWithdrawOptionOne.required	= true;
			createWithdrawCommandData.options.emplace_back(createWithdrawOptionOne);
			createWithdrawCommandData.type = application_command_type::Chat_Input;

			createDepositommandData.dmPermission			 = false;
			createDepositommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createDepositommandData.description				 = "deposit currency from your wallet into your bank.";
			createDepositommandData.name					 = "deposit";
			application_command_option_data createDepositOptionOne;
			createDepositOptionOne.type		   = application_command_option_type::Integer;
			createDepositOptionOne.minValue	   = 1;
			createDepositOptionOne.maxValue	   = static_cast<int32_t>(10000000000);
			createDepositOptionOne.name		   = "amount";
			createDepositOptionOne.description = "the amount of currency which you would like to deposit.";
			createDepositOptionOne.required	   = true;
			createDepositommandData.options.emplace_back(createDepositOptionOne);
			createDepositommandData.type = application_command_type::Chat_Input;

			createHelpData.dmPermission				= true;
			createHelpData.defaultMemberPermissions = permission::Use_Application_Commands;
			createHelpData.type						= application_command_type::Chat_Input;
			createHelpData.description				= "get help with this bot's commands.";
			createHelpData.name						= "help";

			createTestData.dmPermission				= true;
			createTestData.type						= application_command_type::Chat_Input;
			createTestData.name						= "test";
			createTestData.defaultMemberPermissions = permission::Use_Application_Commands;
			createTestData.description				= "test command.";
			application_command_option_data createTestCommandOptionOne{};
			createTestCommandOptionOne.type		   = application_command_option_type::String;
			createTestCommandOptionOne.name		   = "test-value";
			createTestCommandOptionOne.required	   = true;
			createTestCommandOptionOne.description = "the test-value to be entered.";
			createTestData.options.emplace_back(createTestCommandOptionOne);
		}

		create_global_application_command_data createRouletteCommandData{};
		create_global_application_command_data registerApplicationCommandsCommandData{};
		create_global_application_command_data createSellDrugsCommandData{};
		create_global_application_command_data createBalanceCommandData{};
		create_global_application_command_data createStreamAudioData{};
		create_global_application_command_data createDisconnectData{};
		create_global_application_command_data createAddShopItemCommandData{};
		create_global_application_command_data createAddShopRoleCommandData{};
		create_global_application_command_data createCoinflipRoleCommandData{};
		create_global_application_command_data createBlackjackCommandData{};
		create_global_application_command_data createButtonsCommandData{};
		create_global_application_command_data createShopCommandData{};
		create_global_application_command_data createBotInfoCommandData{};
		create_global_application_command_data createCasinoStatsCommandData{};
		create_global_application_command_data createDisplayGuildsDataCommandData{};
		create_global_application_command_data createDuelCommandData{};
		create_global_application_command_data createGamehouseOptionsCommandData{};
		create_global_application_command_data createInventoryCommandData{};
		create_global_application_command_data createLeaderboardCommandData{};
		create_global_application_command_data createRemoveObjectCommandData{};
		create_global_application_command_data createRemoveShopItemCommandData{};
		create_global_application_command_data createRemoveShopRoleCommandData{};
		create_global_application_command_data createRobCommandData{};
		create_global_application_command_data createSetGameChannelCommandData{};
		create_global_application_command_data createSetBalanceCommandData{};
		create_global_application_command_data createSetBorderColorCommandData{};
		create_global_application_command_data createSlotsCommandData{};
		create_global_application_command_data createTransferCommandData{};
		create_global_application_command_data createWithdrawCommandData{};
		create_global_application_command_data createDepositommandData{};
		create_global_application_command_data createHelpData{};
		create_global_application_command_data createTestData{};

		~register_application_commands(){};
	};
}// namespace discord_core_api
